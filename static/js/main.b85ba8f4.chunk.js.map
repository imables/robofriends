{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","ErrorBoundry.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC5B,OACC,sBAAKC,UAAU,sDAAf,UACC,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACpB,gCACC,6BAAKF,IACL,4BAAIC,WCeMK,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACC,8BAEIA,EAAOC,KAAI,SAACC,EAAMC,GACrB,OACC,cAAC,EAAD,CAECR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCMKC,EAdG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,qBAAKV,UAAU,MAAf,SACA,uBAAOW,KAAO,SACdX,UAAU,mCACVY,YAAc,gBACdC,SAAUH,OCEGI,G,MARA,SAACC,GACf,OACC,qBAAKC,MAAQ,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACEJ,EAAMK,aCiBKC,E,kDAnBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHO,E,8DAODC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACP,6DAEDG,KAAKX,MAAMK,a,GAhBOQ,aC6DZC,E,kDA5Cd,aAAe,IAAD,8BACb,gBAaDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAClB,YAAasB,EAAMC,OAAOC,SAbzC,EAAKX,MAAQ,CACZlB,OAAQ,GACRK,YAAa,IAJD,E,gEAQO,IAAD,OACnByB,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAEvB,OAAQkC,S,+BAQhC,IAAD,EACwBZ,KAAKJ,MAA5BlB,EADD,EACCA,OAAQK,EADT,EACSA,YACV8B,EAAiBnC,EAAOoC,QAAO,SAAAC,GAGrC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASlC,EAAYiC,kBAGrD,OAAQtC,EAAOwC,OAGf,sBAAK5C,UAAW,OAAhB,UACC,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACA,cAAC,EAAD,UACC,cAAC,EAAD,CAAU1B,OAAUmC,WAPtB,6C,GA7BgBX,aCNHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCSdO,IAASC,OACP,eAAC,IAAMC,WAAP,WACK,cAAC,EAAD,IADL,OAGAC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b85ba8f4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t   {\r\n\t\t   \trobots.map((user, i) => {\r\n\t\t\treturn( \r\n\t\t\t\t<Card \r\n\t\t\t\t\tkey={i} \r\n\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t})\r\n\t}\r\n    </div>\r\n\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input type = \"search\" \r\n\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\tplaceholder = \"search robots\" \r\n\t\tonChange={searchChange}\r\n\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style ={{overflow: 'scroll', border: '1px solid black', height: '700px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t)\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\r\n\trender () {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Ooooopsss that is not good </h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport './App.css';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundry from './ErrorBoundry';\r\n\r\n//app component that has two states(robots/searchField) and becuase app owns the state, any component that has state\r\n// uses the app class to use the constructor function so they can create this.state, this is what changes in an app\r\n// and describes thye app. The virtual DOM is just an object that collects this entire state and React uses this \r\n// state to render and pass them down as props to the components so that these components that are just pure functions\r\n// can just render and we know the app will always look the same because theyre simple pure functions. The app is the \r\n// only thing that can change the state but it can pass down things such as props. Such as, the onSearchChange was\r\n// passed to SearchBox, and everytime theres an onChange on the input it lets the app know about that change and run \r\n// the onSearchChange function, it runs the function with the event and updates the state of the search field to \r\n// whatever has been typed. With that information in the searchField, we can then communicate that information to the\r\n// CardList and tell it i was to filter the robots state to know have only what is .includes in the search field and \r\n// pass the filtered robots.\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchField: '',\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(users => this.setState({ robots: users }));\r\n\t}\t\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchField: event.target.value})\r\n\t}\r\n\r\n\r\n\trender(){\r\n\t\tconst { robots, searchField} = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\t//if the name of the robots (in lowercase to easily compare) includes anything that is typed in lowercase in \r\n\t\t\t// the searchfield then return all robots true to this. \r\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\r\n\t\treturn !robots.length ? \r\n\t\t<h1>Loading</h1> :\r\n\t\t(\r\n\t\t<div className ='tc  '>\r\n\t\t\t<h1 className=\"f1\">RoboFriends</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t<ErrorBoundry>\r\n\t\t\t\t<CardList robots = {filteredRobots}/>\r\n\t\t\t\t</ErrorBoundry>\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","//importing different scripts\nimport React from 'react';\n//react DOM used for the DOM(websites) but you can have react native for mobile rendering. \nimport ReactDOM from 'react-dom';\n//react allows you to add css to each component instead of one file.\nimport './index.css';\n\nimport App from './App';\n\nimport reportWebVitals from './reportWebVitals';\n\nimport 'tachyons';\n\n\n//grabbing element of id = root and rendering App, this is a react componenet and its saying i want\n    // to render this (App) in the body in JSX (reacts version of html)\nReactDOM.render(\n  <React.StrictMode>\n  \t    <App />,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}